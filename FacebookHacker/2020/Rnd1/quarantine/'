#include <cstdio>
#include <vector>
#include <vector>
#include <string>
#include <iostream>
#include <queue>

using namespace std;

class Solver {
  public:
    Solver(int n, const vector<int>& par, const vector<bool>& infected) : pth(n + 1), subsize(n + 1) {
      for (int i = 2; i <= n; i++) {
        pth[i].push_back(par[i]);
        pth[par[i]].push_back(i);
      }
      vector<int> count(n + 1, 0);
      vector<bool> seen(n + 1, false);
      for (int i = 1; i <= n; i++) {
        if (seen[i]) continue;
        int c = 0;
        queue<int> q;
        q.push(i);
        seen[i] = true;
        while (!q.empty()) {
          int now = q.front();
          q.pop();
          c++;
          for (auto next : pth[now]) {
            if (seen[next]) continue;
            seen[next] = true;
            q.push(next);
          }
        }
        count[c]++;
      }
      dfs(1, 1);
      int first = n;
      while (first >= 0 && count[first] == 0) first--;
      if (first == -1) {
        // zero
        long long ans = 0;
        for (int i = 2; i <= n; i++) {
          ans += (long long)subsize[i] * (n - subsize[i]);
        }
        printf("0 %lld\n", ans);
      } else {
        if (count[first] > 1) {
          // more than one largest
          printf("%d %lld\n", first * 2,
              (long long)count[first] * (count[first] - 1) * first * first);
        } else {
          int second = first - 1;
          while (second >= 0 && count[second] == 0) second--;
          if (second == -1) {
            // one
          } else {
            // two of different size
            printf("%d %lld", first + second,
                (long long)count[first] * count[second] * 2 * first * second);
          }
        }
      }
    }
  private:
    vector<vector<int>> pth;
    vector<int> subsize;

    void dfs(int i, int p) {
      subsize[i] = 1;
      for (int next : pth[i]) {
        if (next == p) continue;
        dfs(next, i);
        subsize[i] += subsize[next];
      }
    }
};

void f() {
  int n, k;
  scanf("%d%d", &n, &k);
  string s;
  cin >> s;
  vector<int> par(n + 1);
  par[1] = 0;
  for (int i = 2; i <= k + 1; i++) {
    scanf("%d", &par[i]);
  }
  long long a, b, c;
  scanf("%lld%lld%lld", &a, &b, &c);
  for (int i = k + 2; i <= n; i++) {
    par[i] = ((a * par[i - 2] + b * par[i - 1] + c) % (i - 1)) + 1;
  }
}

int main() {
  int q;
  scanf("%d", &q);
  for (int i = 1; i <= q; i++) {
    printf("Case #%d: ", i);
    f();
  }
  return 0;
}
